#!/usr/bin/env ts-node

import { INodeProperties } from "n8n-workflow";
import { N8NPropertiesBuilder, N8NPropertiesBuilderConfig, Override } from "@devlikeapro/n8n-openapi-node";
// eslint-disable-next-line import-x/no-unresolved
import * as doc from "./openapi.json";

const CUSTOM_DEFAULTS: Override[] = [
  // Fix order default and name
  {
    find: { default: "[\n  null\n]", displayName: "O", type: "json" },
    replace: {
      default: "",
      displayName: "Order",
    },
  },
  // Improve search name
  {
    find: { displayName: "S", type: "string" },
    replace: { displayName: "Search" },
  },
  // Add min-max
  ...["limit", "offset", "size"].map((name) => ({
    find: { default: 0, name, type: "number" },
    replace: {
      typeOptions: {
        minValue: name === "limit" ? 1 : 0,
        maxValue: name === "limit" ? 200 : undefined,
      },
    },
  })),
];

const config: N8NPropertiesBuilderConfig = {};
const parser = new N8NPropertiesBuilder(doc, config);
const properties = parser.build(CUSTOM_DEFAULTS).map((e) => {
  const { displayName, ...rest } = e;
  // Display name must be first
  const property = { displayName, ...rest };

  // Remove newlines from description (not supported by n8n)
  if (property.description) {
    property.description = property.description.replace(/\n/g, " ");
  }

  // Sort options by name
  if (property.options) {
    property.options.sort((a, b) => a.name.localeCompare(b.name));
  }

  // Remove Webhook as option
  if (property.name === "resource") {
    return { ...property, options: property.options?.filter((o) => o.name !== "Webhook") };
  }
  return property;
});

// Transform non-required fields to optional
const transformToOptional = (fields: INodeProperties[]): INodeProperties[] => {
  const result: INodeProperties[] = [];
  const groups = new Map<string, INodeProperties[]>();

  fields.forEach((field) => {
    const key = field.displayOptions?.show
      ? `${field.displayOptions.show.resource?.[0]}::${field.displayOptions.show.operation?.[0]}`
      : null;

    if (!key || !field.displayOptions?.show?.resource?.[0] || !field.displayOptions?.show?.operation?.[0]) {
      result.push(field);
    } else {
      if (!groups.has(key)) groups.set(key, []);
      groups.get(key)!.push(field);
    }
  });

  groups.forEach((groupFields, key) => {
    const [resource, operation] = key.split("::");
    const required: INodeProperties[] = [];
    const optional: INodeProperties[] = [];

    groupFields.forEach((field) => {
      if (field.type === "notice" || field.name === "operation") {
        result.push(field);
      } else if (field.required || field.name === "limit" || field.name === "offset") {
        required.push(field);
      } else {
        optional.push(field);
      }
    });

    result.push(...required);

    if (optional.length > 0) {
      result.push({
        displayName: "Filters",
        name: "additionalFields",
        type: "collection",
        default: {},
        placeholder: "Add Filter",
        displayOptions: {
          show: { resource: [resource], operation: [operation] },
        },
        options: optional
          .map((o) => ({ ...o, displayOptions: undefined }))
          .sort((a, b) => a.displayName.localeCompare(b.displayName)),
      });
    }
  });

  return result;
};

const finalProperties = transformToOptional(properties);

const generatedContent = `// This file is auto-generated. Do not edit manually.
// Generated by admin/generate-properties.ts

import { INodeProperties } from "n8n-workflow";

export const properties: INodeProperties[] = ${JSON.stringify(finalProperties, null, 2)};
`;

process.stdout.write(generatedContent);
