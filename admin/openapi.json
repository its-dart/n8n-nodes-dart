{
  "openapi": "3.1.0",
  "info": {
    "title": "Dart Public API",
    "version": "1.0.0",
    "description": "Public API documentation for Dart. Dart is an application for task, doc, and project management. With this API you can create and access tasks, docs, comments, and more for you and your team.",
    "termsOfService": "https://app.dartai.com/legal/terms-of-use",
    "contact": {
      "name": "Dart Support",
      "email": "support@dartai.com"
    }
  },
  "paths": {
    "/comments": {
      "post": {
        "operationId": "addTaskComment",
        "description": "Record a new comment that the user intends to add to a given task. This will save the comment in Dart for later access, search, etc.",
        "summary": "Create a new comment",
        "tags": ["Comment"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WrappedCommentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedComment"
                }
              }
            },
            "description": "Success, including the created comment"
          },
          "400": {
            "description": "Invalid request, including the errors"
          }
        }
      }
    },
    "/comments/list": {
      "get": {
        "operationId": "listComments",
        "description": "List comments for a task with filtering options. Filter by author, text content, or date range. Sort by date or hierarchical thread order. Task ID required. Supports pagination.",
        "parameters": [
          {
            "in": "query",
            "name": "author",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "author_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "description": "Filter by IDs"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "o",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-published_at", "hierarchical", "published_at"]
              }
            },
            "description": "Ordering\n\n* `published_at` - Published At\n* `-published_at` - Published At (descending)\n* `hierarchical` - Hierarchical",
            "explode": false,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "parent_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "published_at",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "published_at_after",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "published_at_before",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "task",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "task_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Comment"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCommentList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/config": {
      "get": {
        "operationId": "getConfig",
        "description": "Get information about the user's space, including all of the possible values that can be provided to other endpoints.",
        "summary": "Get user space configuration",
        "tags": ["Config"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSpaceConfiguration"
                }
              }
            },
            "description": "Success, including all of the options for the user space"
          }
        }
      }
    },
    "/dartboards/{id}": {
      "get": {
        "operationId": "getDartboard",
        "description": "Retrieve an existing dartboard. This will return the dartboard's information, including the title and description.",
        "summary": "Retrieve an existing dartboard",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "required": true
          }
        ],
        "tags": ["Dartboard"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedDartboard"
                }
              }
            },
            "description": "Success, including the retrieved dartboard"
          },
          "400": {
            "description": "Invalid request, including the errors"
          },
          "404": {
            "description": "Dartboard not found, including the errors"
          }
        }
      }
    },
    "/docs": {
      "post": {
        "operationId": "createDoc",
        "description": "Record a new doc that the user intends to write down. This will save the doc in Dart for later access, search, etc. By default the created doc will be in the Docs folder. More information can be included in the text.",
        "summary": "Create a new doc",
        "tags": ["Doc"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WrappedDocCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedDoc"
                }
              }
            },
            "description": "Success, including the created doc"
          },
          "400": {
            "description": "Invalid request, including the errors"
          }
        }
      }
    },
    "/docs/{id}": {
      "get": {
        "operationId": "getDoc",
        "description": "Retrieve an existing doc. This will return the doc's information, including the title, folder, text and others.",
        "summary": "Retrieve an existing doc",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "required": true
          }
        ],
        "tags": ["Doc"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedDoc"
                }
              }
            },
            "description": "Success, including the retrieved doc"
          },
          "400": {
            "description": "Invalid request, including the errors"
          },
          "404": {
            "description": "Doc not found, including the errors"
          }
        }
      },
      "put": {
        "operationId": "updateDoc",
        "description": "Update certain properties of an existing doc. This will save the doc in Dart for later access, search, etc. Any properties that are not specified will not be changed.",
        "summary": "Update an existing doc",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "required": true
          }
        ],
        "tags": ["Doc"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WrappedDocUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedDoc"
                }
              }
            },
            "description": "Success, including the updated doc"
          },
          "400": {
            "description": "Invalid request, including the errors"
          },
          "404": {
            "description": "Doc not found, including the errors"
          }
        }
      },
      "delete": {
        "operationId": "deleteDoc",
        "description": "Move an existing doc to the trash, where it can be recovered if needed. Nothing else about the doc will be changed.",
        "summary": "Delete an existing doc",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "required": true
          }
        ],
        "tags": ["Doc"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedDoc"
                }
              }
            },
            "description": "Success, including the deleted doc"
          },
          "400": {
            "description": "Invalid request, including the errors"
          },
          "404": {
            "description": "Doc not found, including the errors"
          }
        }
      }
    },
    "/docs/list": {
      "get": {
        "operationId": "listDocs",
        "description": "List docs with filtering and search capabilities. Filter by folder, title, text content, or use full-text search. Sort by creation/update date or title. Supports pagination.",
        "parameters": [
          {
            "in": "query",
            "name": "folder",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "folder_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "description": "Filter by IDs"
          },
          {
            "in": "query",
            "name": "in_trash",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "o",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-created_at", "-order", "-title", "-updated_at", "created_at", "order", "title", "updated_at"]
              }
            },
            "description": "Ordering\n\n* `order` - Order\n* `-order` - Order (descending)\n* `created_at` - Created at\n* `-created_at` - Created at (descending)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (descending)\n* `title` - Title\n* `-title` - Title (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "s",
            "schema": {
              "type": "string"
            },
            "description": "Search by title, text, or folder title"
          },
          {
            "in": "query",
            "name": "text",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Doc"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedConciseDocList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/folders/{id}": {
      "get": {
        "operationId": "getFolder",
        "description": "Retrieve an existing folder. This will return the folder's information, including the title, description, all docs within it, and others.",
        "summary": "Retrieve an existing folder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "required": true
          }
        ],
        "tags": ["Folder"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedFolder"
                }
              }
            },
            "description": "Success, including the retrieved folder"
          },
          "400": {
            "description": "Invalid request, including the errors"
          },
          "404": {
            "description": "Folder not found, including the errors"
          }
        }
      }
    },
    "/help-center-articles/list": {
      "get": {
        "operationId": "listHelpCenterArticles",
        "description": "Search for up to two help center articles by their semantic similarity to a short (1-5 word) query.",
        "summary": "List help center articles by query",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "description": "The search query (1-5 words) to find relevant help articles"
          }
        ],
        "tags": ["Help center article"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedHelpCenterArticles"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/skills/by-title": {
      "get": {
        "operationId": "retrieveSkillByTitle",
        "description": "Retrieve a skill by its title. Skills are user-defined instructions or templates for performing specific task types in the workspace. Returns the skill's title and instructions if found.",
        "summary": "Retrieve a skill by title",
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "description": "The title of the skill to retrieve",
            "required": true
          }
        ],
        "tags": ["Skill"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedSkill"
                }
              }
            },
            "description": "Success, including the retrieved skill"
          },
          "404": {
            "description": "Skill not found"
          }
        }
      }
    },
    "/tasks": {
      "post": {
        "operationId": "createTask",
        "description": "Record a new task that the user intends to do. By default the task will be assigned to the current user, have an unstarted status, have no parent, and be in the default dartboard. More information can be included in the description.",
        "summary": "Create a new task",
        "tags": ["Task"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WrappedTaskCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedTask"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "operationId": "getTask",
        "description": "Retrieve an existing task. This will return the task's information, including the title, dartboard, status, description and others.",
        "summary": "Retrieve an existing task",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "required": true
          }
        ],
        "tags": ["Task"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedTask"
                }
              }
            },
            "description": "Success, including the retrieved task"
          },
          "400": {
            "description": "Invalid request, including the errors"
          },
          "404": {
            "description": "Task not found, including the errors"
          }
        }
      },
      "put": {
        "operationId": "updateTask",
        "description": "Update certain properties of an existing task. This will save the task in Dart for later access, search, etc. Any properties that are not specified will not be changed.",
        "summary": "Update an existing task",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "required": true
          }
        ],
        "tags": ["Task"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WrappedTaskUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedTask"
                }
              }
            },
            "description": "Success, including the updated task"
          },
          "400": {
            "description": "Invalid request, including the errors"
          },
          "404": {
            "description": "Task not found, including the errors"
          }
        }
      },
      "delete": {
        "operationId": "deleteTask",
        "description": "Move an existing task to the trash, where it can be recovered if needed. Nothing else about the task will be changed.",
        "summary": "Delete an existing task",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "required": true
          }
        ],
        "tags": ["Task"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedTask"
                }
              }
            },
            "description": "Success, including the deleted task"
          },
          "400": {
            "description": "Invalid request, including the errors"
          },
          "404": {
            "description": "Task not found, including the errors"
          }
        }
      }
    },
    "/tasks/{id}/attachments/from-url": {
      "post": {
        "operationId": "addTaskAttachmentFromUrl",
        "description": "Attach a file from a provided URL to a task. The file will be downloaded and attached asynchronously. This operation may take a few moments to complete.",
        "summary": "Attach a file from a provided URL to a task",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "required": true
          }
        ],
        "tags": ["Attachment"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentCreateFromUrl"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            },
            "description": "Success, including the attached attachment details"
          },
          "400": {
            "description": "Invalid request, including the errors"
          }
        }
      }
    },
    "/tasks/list": {
      "get": {
        "operationId": "listTasks",
        "description": "List tasks with powerful filtering options. Filter by dartboard, status, assignee, tags, priority, dates, completion state, view, and more. Supports pagination with limit/offset.",
        "parameters": [
          {
            "in": "query",
            "name": "assignee",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "assignee_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dartboard",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dartboard_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "due_at",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "due_at_after",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "due_at_before",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "description": "Filter by IDs"
          },
          {
            "in": "query",
            "name": "in_trash",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_completed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "parent_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "start_at",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "start_at_after",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "start_at_before",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tag_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "view",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "view_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Task"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedConciseTaskList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/views/{id}": {
      "get": {
        "operationId": "getView",
        "description": "Retrieve an existing view. This will return the view's information, including the title, description, and others.",
        "summary": "Retrieve an existing view",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "required": true
          }
        ],
        "tags": ["View"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedView"
                }
              }
            },
            "description": "Success, including the retrieved view"
          },
          "400": {
            "description": "Invalid request, including the errors"
          },
          "404": {
            "description": "View not found, including the errors"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Attachment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the attachment."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The link to access the attachment."
          }
        },
        "required": ["name", "url"]
      },
      "AttachmentCreateFromUrl": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the file to upload."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the file to upload."
          }
        },
        "required": ["name", "url"]
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the comment."
          },
          "parentId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the parent comment, if any."
          },
          "htmlUrl": {
            "type": "string",
            "description": "The URL that can be used to open the comment in the Dart web UI."
          },
          "author": {
            "type": "string",
            "description": "The name or email of the user that authored the comment."
          },
          "taskId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the task that the comment is associated with."
          },
          "text": {
            "type": "string",
            "description": "The full content of the comment, which can include markdown formatting."
          }
        },
        "required": ["author", "htmlUrl", "id", "taskId", "text"]
      },
      "CommentCreate": {
        "type": "object",
        "properties": {
          "parentId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the parent comment, if any."
          },
          "taskId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the task that the comment is associated with."
          },
          "text": {
            "type": "string",
            "description": "The full content of the comment, which can include markdown formatting."
          }
        },
        "required": ["taskId", "text"]
      },
      "ConciseDoc": {
        "type": "object",
        "description": "This concise doc serializer is going to be used in docs listing view only.",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the doc."
          },
          "htmlUrl": {
            "type": "string",
            "description": "The URL that can be used to open the doc in the Dart web UI."
          },
          "title": {
            "type": "string",
            "description": "The title, which is a short description of the doc."
          },
          "folder": {
            "type": "string",
            "description": "The full title of the folder, which is a project or list of docs."
          }
        },
        "required": ["folder", "htmlUrl", "id", "title"]
      },
      "ConciseTask": {
        "type": "object",
        "description": "This concise task serializer is going to be used in tasks listing view only.",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the task."
          },
          "htmlUrl": {
            "type": "string",
            "description": "The URL that can be used to open the task in the Dart web UI."
          },
          "title": {
            "type": "string",
            "description": "The title, which is a short description of what needs to be done."
          },
          "parentId": {
            "type": ["string", "null"],
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the parent task. This can be null. These tasks have a parent-child relationship where the current task is the child and this task ID corresponds to the parent. Subtasks inherit context from their parent and are typically smaller units of work."
          },
          "dartboard": {
            "type": "string",
            "description": "The full title of the dartboard, which is a project or list of tasks."
          },
          "type": {
            "type": "string",
            "description": "The title of the type of the task."
          },
          "status": {
            "type": "string",
            "description": "The status from the list of available statuses."
          },
          "assignees": {
            "type": ["array", "null"],
            "items": {
              "type": "string"
            },
            "description": "The names or emails of the users that the task is assigned to. Either this or assignee must be included, depending on whether the workspaces allows multiple assignees or not."
          },
          "assignee": {
            "type": ["string", "null"],
            "description": "The name or email of the user that the task is assigned to. Either this or assignees must be included, depending on whether the workspaces allows multiple assignees or not."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Any tags that should be applied to the task, which can be used to filter and search for tasks. Tags are also known as labels or components and are strings that can be anything, but should be short and descriptive. This list can be empty."
          },
          "priority": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Priority"
              },
              {
                "type": "null"
              },
              {
                "type": "null"
              }
            ],
            "description": "The priority, which is a string that can be one of the specified options. This is used to sort tasks and determine which tasks should be done first."
          },
          "startAt": {
            "type": ["string", "null"],
            "description": "The start date, which is a date that the task should be started by in ISO format, like YYYY-MM-DD."
          },
          "dueAt": {
            "type": ["string", "null"],
            "description": "The due date, which is a date that the task should be completed by in ISO format, like YYYY-MM-DD."
          },
          "size": {
            "type": ["string", "integer", "null"],
            "description": "The size, which represents the amount of work that needs to be done. This is used to determine how long the task will take to complete."
          },
          "timeTracking": {
            "type": "string",
            "description": "The time tracking, which is a string that indicates the amount of time spent on the task in hh:mm:ss format (or an empty string if no time has been tracked)."
          },
          "customProperties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomProperties"
              },
              {
                "type": "null"
              }
            ],
            "description": "The custom properties, which is a dict of custom properties that are associated with the task."
          }
        },
        "required": ["dartboard", "htmlUrl", "id", "parentId", "status", "title", "type"]
      },
      "CustomProperties": {
        "type": "object",
        "properties": {},
        "additionalProperties": {
          "oneOf": [
            {
              "title": "CustomPropertyCheckbox",
              "type": "boolean"
            },
            {
              "title": "CustomPropertyDatesRange",
              "type": ["array", "null"],
              "items": {
                "type": ["string", "null"]
              }
            },
            {
              "title": "CustomPropertyDatesSingle",
              "type": ["string", "null"]
            },
            {
              "title": "CustomPropertyMultiselect",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "title": "CustomPropertyNumber",
              "type": ["number", "null"]
            },
            {
              "title": "CustomPropertySelect",
              "type": ["string", "null"]
            },
            {
              "title": "CustomPropertyStatus",
              "type": "string"
            },
            {
              "title": "CustomPropertyText",
              "type": "string"
            },
            {
              "title": "CustomPropertyTimeTracking",
              "type": "string",
              "pattern": "^[0-9]+:[0-5][0-9]:[0-5][0-9]$",
              "description": "Duration in HH:MM:SS format",
              "readOnly": true
            },
            {
              "title": "CustomPropertyUserMultiple",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "title": "CustomPropertyUserSingle",
              "type": ["string", "null"]
            }
          ]
        },
        "example": {
          "customCheckboxProperty": true,
          "customDatesProperty": "2025-05-10",
          "customDatesPropertyWithRange": ["2025-05-01", "2025-05-30"],
          "customMultiselectProperty": ["frontend", "bug"],
          "customNumberPropertyWithIntegerFormat": 5,
          "customNumberPropertyWithPercentageFormat": 75,
          "customNumberPropertyWithDollarsFormat": 1500.5,
          "customSelectProperty": "In Progress",
          "customStatusProperty": "Blocked",
          "customTextProperty": "This task requires additional review from the design team",
          "customUserProperty": "john.doe@example.com",
          "customMultipleUserProperty": ["john.doe@example.com", "Alice Smith"]
        }
      },
      "Dartboard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the dartboard."
          },
          "htmlUrl": {
            "type": "string",
            "description": "The URL that can be used to open the dartboard in the Dart web UI."
          },
          "title": {
            "type": "string",
            "description": "The title, which is a short description of the dartboard."
          },
          "description": {
            "type": "string",
            "description": "The description, which is a longer description of the dartboard."
          }
        },
        "required": ["description", "htmlUrl", "id", "title"]
      },
      "DateRange": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "minItems": 2,
        "maxItems": 2,
        "additionalItems": false
      },
      "Doc": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the doc."
          },
          "htmlUrl": {
            "type": "string",
            "description": "The URL that can be used to open the doc in the Dart web UI."
          },
          "title": {
            "type": "string",
            "description": "The title, which is a short description of the doc."
          },
          "folder": {
            "type": "string",
            "description": "The full title of the folder, which is a project or list of docs."
          },
          "text": {
            "type": "string",
            "description": "The full content of the doc, which can include markdown formatting."
          }
        },
        "required": ["folder", "htmlUrl", "id", "text", "title"]
      },
      "DocCreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title, which is a short description of the doc."
          },
          "folder": {
            "type": "string",
            "description": "The full title of the folder, which is a project or list of docs."
          },
          "text": {
            "type": "string",
            "description": "The full content of the doc, which can include markdown formatting."
          }
        },
        "required": ["title"]
      },
      "DocUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the doc."
          },
          "title": {
            "type": "string",
            "description": "The title, which is a short description of the doc."
          },
          "folder": {
            "type": "string",
            "description": "The full title of the folder, which is a project or list of docs."
          },
          "text": {
            "type": "string",
            "description": "The full content of the doc, which can include markdown formatting."
          }
        },
        "required": ["id"]
      },
      "Folder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the folder."
          },
          "htmlUrl": {
            "type": "string",
            "description": "The URL that can be used to open the folder in the Dart web UI."
          },
          "title": {
            "type": "string",
            "description": "The title, which is a short description of the folder."
          },
          "description": {
            "type": "string",
            "description": "The description, which is a longer description of the folder."
          }
        },
        "required": ["description", "htmlUrl", "id", "title"]
      },
      "PaginatedCommentList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      },
      "PaginatedConciseDocList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConciseDoc"
            }
          }
        }
      },
      "PaginatedConciseTaskList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConciseTask"
            }
          }
        }
      },
      "Priority": {
        "enum": ["Critical", "High", "Medium", "Low"],
        "type": "string",
        "description": "* `Critical` - CRITICAL\n* `High` - HIGH\n* `Medium` - MEDIUM\n* `Low` - LOW",
        "x-enum-varnames": ["CRITICAL", "HIGH", "MEDIUM", "LOW"]
      },
      "Skill": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the skill."
          },
          "title": {
            "type": "string",
            "description": "The title of the skill, describing the task type."
          },
          "promptMarkdown": {
            "type": "string",
            "description": "User-defined instructions for performing this skill in markdown format."
          }
        },
        "required": ["id", "promptMarkdown", "title"]
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the task."
          },
          "htmlUrl": {
            "type": "string",
            "description": "The URL that can be used to open the task in the Dart web UI."
          },
          "title": {
            "type": "string",
            "description": "The title, which is a short description of what needs to be done."
          },
          "parentId": {
            "type": ["string", "null"],
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the parent task. This can be null. These tasks have a parent-child relationship where the current task is the child and this task ID corresponds to the parent. Subtasks inherit context from their parent and are typically smaller units of work."
          },
          "dartboard": {
            "type": "string",
            "description": "The full title of the dartboard, which is a project or list of tasks."
          },
          "type": {
            "type": "string",
            "description": "The title of the type of the task."
          },
          "status": {
            "type": "string",
            "description": "The status from the list of available statuses."
          },
          "description": {
            "type": "string",
            "description": "A longer description of the task, which can include markdown formatting."
          },
          "assignees": {
            "type": ["array", "null"],
            "items": {
              "type": "string"
            },
            "description": "The names or emails of the users that the task is assigned to. Either this or assignee must be included, depending on whether the workspaces allows multiple assignees or not."
          },
          "assignee": {
            "type": ["string", "null"],
            "description": "The name or email of the user that the task is assigned to. Either this or assignees must be included, depending on whether the workspaces allows multiple assignees or not."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Any tags that should be applied to the task, which can be used to filter and search for tasks. Tags are also known as labels or components and are strings that can be anything, but should be short and descriptive. This list can be empty."
          },
          "priority": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Priority"
              },
              {
                "type": "null"
              },
              {
                "type": "null"
              }
            ],
            "description": "The priority, which is a string that can be one of the specified options. This is used to sort tasks and determine which tasks should be done first."
          },
          "startAt": {
            "type": ["string", "null"],
            "description": "The start date, which is a date that the task should be started by in ISO format, like YYYY-MM-DD."
          },
          "dueAt": {
            "type": ["string", "null"],
            "description": "The due date, which is a date that the task should be completed by in ISO format, like YYYY-MM-DD."
          },
          "size": {
            "type": ["string", "integer", "null"],
            "description": "The size, which represents the amount of work that needs to be done. This is used to determine how long the task will take to complete."
          },
          "timeTracking": {
            "type": "string",
            "description": "The time tracking, which is a string that indicates the amount of time spent on the task in hh:mm:ss format (or an empty string if no time has been tracked)."
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            },
            "description": "The attachments, which is a list of attachments that are associated with the task."
          },
          "customProperties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomProperties"
              },
              {
                "type": "null"
              }
            ],
            "description": "The custom properties, which is a dict of custom properties that are associated with the task."
          },
          "taskRelationships": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TaskRelationships"
              },
              {
                "type": "null"
              }
            ],
            "description": "The relationships associated with the task."
          }
        },
        "required": ["attachments", "dartboard", "description", "htmlUrl", "id", "parentId", "status", "title", "type"]
      },
      "TaskCreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title, which is a short description of what needs to be done."
          },
          "parentId": {
            "type": ["string", "null"],
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the parent task. This can be null. These tasks have a parent-child relationship where the current task is the child and this task ID corresponds to the parent. Subtasks inherit context from their parent and are typically smaller units of work."
          },
          "dartboard": {
            "type": "string",
            "description": "The full title of the dartboard, which is a project or list of tasks."
          },
          "type": {
            "type": "string",
            "description": "The title of the type of the task."
          },
          "status": {
            "type": "string",
            "description": "The status from the list of available statuses."
          },
          "description": {
            "type": "string",
            "description": "A longer description of the task, which can include markdown formatting."
          },
          "assignees": {
            "type": ["array", "null"],
            "items": {
              "type": "string"
            },
            "description": "The names or emails of the users that the task is assigned to. Either this or assignee must be included, depending on whether the workspaces allows multiple assignees or not."
          },
          "assignee": {
            "type": ["string", "null"],
            "description": "The name or email of the user that the task is assigned to. Either this or assignees must be included, depending on whether the workspaces allows multiple assignees or not."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Any tags that should be applied to the task, which can be used to filter and search for tasks. Tags are also known as labels or components and are strings that can be anything, but should be short and descriptive. This list can be empty."
          },
          "priority": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Priority"
              },
              {
                "type": "null"
              },
              {
                "type": "null"
              }
            ],
            "description": "The priority, which is a string that can be one of the specified options. This is used to sort tasks and determine which tasks should be done first."
          },
          "startAt": {
            "type": ["string", "null"],
            "description": "The start date, which is a date that the task should be started by in ISO format, like YYYY-MM-DD."
          },
          "dueAt": {
            "type": ["string", "null"],
            "description": "The due date, which is a date that the task should be completed by in ISO format, like YYYY-MM-DD."
          },
          "size": {
            "type": ["string", "integer", "null"],
            "description": "The size, which represents the amount of work that needs to be done. This is used to determine how long the task will take to complete."
          },
          "customProperties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomProperties"
              },
              {
                "type": "null"
              }
            ],
            "description": "The custom properties, which is a dict of custom properties that are associated with the task."
          },
          "taskRelationships": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TaskRelationships"
              },
              {
                "type": "null"
              }
            ],
            "description": "The relationships associated with the task."
          }
        },
        "required": ["title"]
      },
      "TaskRelationships": {
        "type": "object",
        "properties": {
          "subtaskIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "description": "Array of task IDs that are subtasks of this task. These tasks have a parent-child relationship where this task is the parent. Subtasks inherit context from their parent and are typically smaller units of work."
          },
          "blockerIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "description": "Array of task IDs that block this task from being completed. These are dependencies that must be resolved/completed before this task can proceed. The blocking tasks have priority over this task."
          },
          "blockingIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "description": "Array of task IDs that are blocked by this task. This task must be completed before the blocked tasks can proceed. This task is a dependency for the blocked tasks and has priority over them."
          },
          "duplicateIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "description": "Array of task IDs that are duplicates of this task. These represent the same work item and should typically be consolidated to avoid duplicate effort. Only one of the duplicates should be completed."
          },
          "relatedIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{12}$"
            },
            "description": "Array of task IDs that are related to this task. These tasks have some contextual relationship but no direct dependency. They may share similar goals, components, or be part of the same feature/epic."
          }
        },
        "additionalProperties": false,
        "nullable": true,
        "example": {
          "subtaskIds": ["abcdefghijk1", "abcdefghijk2"],
          "blockerIds": ["abcdefghijk3"],
          "blockingIds": ["abcdefghijk4"],
          "duplicateIds": ["abcdefghijk5"],
          "relatedIds": ["abcdefghijk6", "abcdefghijk7"]
        }
      },
      "TaskUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the task."
          },
          "title": {
            "type": "string",
            "description": "The title, which is a short description of what needs to be done."
          },
          "parentId": {
            "type": ["string", "null"],
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the parent task. This can be null. These tasks have a parent-child relationship where the current task is the child and this task ID corresponds to the parent. Subtasks inherit context from their parent and are typically smaller units of work."
          },
          "dartboard": {
            "type": "string",
            "description": "The full title of the dartboard, which is a project or list of tasks."
          },
          "type": {
            "type": "string",
            "description": "The title of the type of the task."
          },
          "status": {
            "type": "string",
            "description": "The status from the list of available statuses."
          },
          "description": {
            "type": "string",
            "description": "A longer description of the task, which can include markdown formatting."
          },
          "assignees": {
            "type": ["array", "null"],
            "items": {
              "type": "string"
            },
            "description": "The names or emails of the users that the task is assigned to. Either this or assignee must be included, depending on whether the workspaces allows multiple assignees or not."
          },
          "assignee": {
            "type": ["string", "null"],
            "description": "The name or email of the user that the task is assigned to. Either this or assignees must be included, depending on whether the workspaces allows multiple assignees or not."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Any tags that should be applied to the task, which can be used to filter and search for tasks. Tags are also known as labels or components and are strings that can be anything, but should be short and descriptive. This list can be empty."
          },
          "priority": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Priority"
              },
              {
                "type": "null"
              },
              {
                "type": "null"
              }
            ],
            "description": "The priority, which is a string that can be one of the specified options. This is used to sort tasks and determine which tasks should be done first."
          },
          "startAt": {
            "type": ["string", "null"],
            "description": "The start date, which is a date that the task should be started by in ISO format, like YYYY-MM-DD."
          },
          "dueAt": {
            "type": ["string", "null"],
            "description": "The due date, which is a date that the task should be completed by in ISO format, like YYYY-MM-DD."
          },
          "size": {
            "type": ["string", "integer", "null"],
            "description": "The size, which represents the amount of work that needs to be done. This is used to determine how long the task will take to complete."
          },
          "customProperties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomProperties"
              },
              {
                "type": "null"
              }
            ],
            "description": "The custom properties, which is a dict of custom properties that are associated with the task."
          },
          "taskRelationships": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TaskRelationships"
              },
              {
                "type": "null"
              }
            ],
            "description": "The relationships associated with the task."
          }
        },
        "required": ["id"]
      },
      "TimeTracking": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TimeTrackingEntry"
        }
      },
      "TimeTrackingEntry": {
        "type": "object",
        "properties": {
          "userDuid": {
            "type": "string"
          },
          "startedAt": {
            "type": "string"
          },
          "finishedAt": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["userDuid", "startedAt", "finishedAt"],
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": ["name"]
      },
      "UserSpaceConfiguration": {
        "type": "object",
        "properties": {
          "today": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "dartboards": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "folders": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "statuses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "priorities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sizes": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                }
              }
            ],
            "readOnly": true
          },
          "skills": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customProperties": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "title": "CustomPropertyCheckboxTypeDef",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "const": "Checkbox"
                    }
                  },
                  "required": ["name", "type"]
                },
                {
                  "title": "CustomPropertyDatesTypeDef",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "const": "Dates"
                    },
                    "isRange": {
                      "type": "boolean"
                    }
                  },
                  "required": ["name", "type", "isRange"]
                },
                {
                  "title": "CustomPropertyMultiselectTypeDef",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "const": "Multiselect"
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": ["name", "type", "options"]
                },
                {
                  "title": "CustomPropertyNumberTypeDef",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "const": "Number"
                    },
                    "format": {
                      "title": "CustomPropertyNumberFormatTypeDef",
                      "type": "string",
                      "enum": ["Dollars", "Integer", "Percentage"]
                    }
                  },
                  "required": ["name", "type", "format"]
                },
                {
                  "title": "CustomPropertySelectTypeDef",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "const": "Select"
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": ["name", "type", "options"]
                },
                {
                  "title": "CustomPropertyStatusTypeDef",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "const": "Status"
                    }
                  },
                  "statuses": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "required": ["name", "type"]
                },
                {
                  "title": "CustomPropertyTextTypeDef",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "const": "Text"
                    }
                  },
                  "required": ["name", "type"]
                },
                {
                  "title": "CustomPropertyTimeTrackingTypeDef",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "const": "Time tracking"
                    }
                  },
                  "required": ["name", "type"]
                },
                {
                  "title": "CustomPropertyUserTypeDef",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "const": "User"
                    },
                    "isMultiple": {
                      "type": "boolean"
                    }
                  },
                  "required": ["name", "type", "isMultiple"]
                }
              ]
            },
            "readOnly": true
          }
        },
        "required": [
          "assignees",
          "customProperties",
          "dartboards",
          "folders",
          "priorities",
          "sizes",
          "skills",
          "statuses",
          "tags",
          "today",
          "types",
          "user"
        ]
      },
      "View": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{12}$",
            "description": "The universal, unique ID of the view."
          },
          "htmlUrl": {
            "type": "string",
            "description": "The URL that can be used to open the view in the Dart web UI."
          },
          "title": {
            "type": "string",
            "description": "The title, which is a short description of the view."
          },
          "description": {
            "type": "string",
            "description": "The description, which is a longer description of the view."
          }
        },
        "required": ["description", "htmlUrl", "id", "title"]
      },
      "WrappedComment": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/Comment"
          }
        },
        "required": ["item"]
      },
      "WrappedCommentCreate": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/CommentCreate"
          }
        },
        "required": ["item"]
      },
      "WrappedDartboard": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/Dartboard"
          }
        },
        "required": ["item"]
      },
      "WrappedDoc": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/Doc"
          }
        },
        "required": ["item"]
      },
      "WrappedDocCreate": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/DocCreate"
          }
        },
        "required": ["item"]
      },
      "WrappedDocUpdate": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/DocUpdate"
          }
        },
        "required": ["item"]
      },
      "WrappedFolder": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/Folder"
          }
        },
        "required": ["item"]
      },
      "WrappedHelpCenterArticles": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["items"]
      },
      "WrappedSkill": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/Skill"
          }
        },
        "required": ["item"]
      },
      "WrappedTask": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/Task"
          }
        },
        "required": ["item"]
      },
      "WrappedTaskCreate": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/TaskCreate"
          }
        },
        "required": ["item"]
      },
      "WrappedTaskUpdate": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/TaskUpdate"
          }
        },
        "required": ["item"]
      },
      "WrappedView": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/View"
          }
        },
        "required": ["item"]
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://app.dartai.com/api/oauth/authorize/",
            "tokenUrl": "https://app.dartai.com/api/oauth/token/",
            "refreshUrl": "https://app.dartai.com/api/oauth/token/",
            "scopes": {
              "read": "View your Dart data",
              "write": "Change your Dart data"
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://app.dartai.com/api/v0/public"
    }
  ],
  "tags": [
    {
      "name": "Comment"
    },
    {
      "name": "Config"
    },
    {
      "name": "Dartboard"
    },
    {
      "name": "Doc"
    },
    {
      "name": "Folder"
    },
    {
      "name": "Help center article"
    },
    {
      "name": "Skill"
    },
    {
      "name": "Task"
    },
    {
      "name": "View"
    },
    {
      "name": "Webhook"
    }
  ],
  "webhooks": {
    "taskCreated": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["task.created"]
                  },
                  "data": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "taskUpdated": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["task.updated"]
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "model": {
                        "$ref": "#/components/schemas/Task"
                      },
                      "oldModel": {
                        "$ref": "#/components/schemas/Task"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "taskDeleted": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["task.deleted"]
                  },
                  "data": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "docCreated": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["doc.created"]
                  },
                  "data": {
                    "$ref": "#/components/schemas/Doc"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "docUpdated": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["doc.updated"]
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "model": {
                        "$ref": "#/components/schemas/Doc"
                      },
                      "oldModel": {
                        "$ref": "#/components/schemas/Doc"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "docDeleted": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["doc.deleted"]
                  },
                  "data": {
                    "$ref": "#/components/schemas/Doc"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "commentCreated": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["comment.created"]
                  },
                  "data": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  }
}
