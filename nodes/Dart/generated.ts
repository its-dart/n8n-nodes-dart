// This file is auto-generated. Do not edit manually.
// Generated by admin/generate-properties.ts

import { INodeProperties } from "n8n-workflow";

export const properties: INodeProperties[] = [
  {
    displayName: "Resource",
    name: "resource",
    type: "options",
    noDataExpression: true,
    options: [
      {
        name: "Attachment",
        value: "Attachment",
      },
      {
        name: "Comment",
        value: "Comment",
      },
      {
        name: "Config",
        value: "Config",
      },
      {
        name: "Dartboard",
        value: "Dartboard",
      },
      {
        name: "Doc",
        value: "Doc",
      },
      {
        name: "Folder",
        value: "Folder",
      },
      {
        name: "Help Center Article",
        value: "Help Center Article",
      },
      {
        name: "Skill",
        value: "Skill",
      },
      {
        name: "Task",
        value: "Task",
      },
      {
        name: "View",
        value: "View",
      },
    ],
    default: "Attachment",
  },
  {
    displayName: "Operation",
    name: "operation",
    type: "options",
    noDataExpression: true,
    displayOptions: {
      show: {
        resource: ["Comment"],
      },
    },
    options: [
      {
        name: "Add Task Comment",
        value: "Add Task Comment",
        action: "Create a new comment",
        description:
          "Record a new comment that the user intends to add to a given task. This will save the comment in Dart for later access, search, etc.",
        routing: {
          request: {
            method: "POST",
            url: "=/comments",
          },
        },
      },
      {
        name: "List Comments",
        value: "List Comments",
        action: "List comments",
        description:
          "List comments for a task with filtering options. Filter by author, text content, or date range. Sort by date or hierarchical thread order. Task ID required. Supports pagination.",
        routing: {
          request: {
            method: "GET",
            url: "=/comments/list",
          },
        },
      },
    ],
    default: "Add Task Comment",
  },
  {
    displayName: "Operation",
    name: "operation",
    type: "options",
    noDataExpression: true,
    displayOptions: {
      show: {
        resource: ["Config"],
      },
    },
    options: [
      {
        name: "Get Config",
        value: "Get Config",
        action: "Get user space configuration",
        description:
          "Get information about the user's space, including all of the possible values that can be provided to other endpoints",
        routing: {
          request: {
            method: "GET",
            url: "=/config",
          },
        },
      },
    ],
    default: "Get Config",
  },
  {
    displayName: "Operation",
    name: "operation",
    type: "options",
    noDataExpression: true,
    displayOptions: {
      show: {
        resource: ["Dartboard"],
      },
    },
    options: [
      {
        name: "Get Dartboard",
        value: "Get Dartboard",
        action: "Retrieve an existing dartboard",
        description:
          "Retrieve an existing dartboard. This will return the dartboard's information, including the title and description.",
        routing: {
          request: {
            method: "GET",
            url: '=/dartboards/{{$parameter["id"]}}',
          },
        },
      },
    ],
    default: "Get Dartboard",
  },
  {
    displayName: "Operation",
    name: "operation",
    type: "options",
    noDataExpression: true,
    displayOptions: {
      show: {
        resource: ["Doc"],
      },
    },
    options: [
      {
        name: "Create Doc",
        value: "Create Doc",
        action: "Create a new doc",
        description:
          "Record a new doc that the user intends to write down. This will save the doc in Dart for later access, search, etc. By default the created doc will be in the Docs folder. More information can be included in the text.",
        routing: {
          request: {
            method: "POST",
            url: "=/docs",
          },
        },
      },
      {
        name: "Delete Doc",
        value: "Delete Doc",
        action: "Delete an existing doc",
        description:
          "Move an existing doc to the trash, where it can be recovered if needed. Nothing else about the doc will be changed.",
        routing: {
          request: {
            method: "DELETE",
            url: '=/docs/{{$parameter["id"]}}',
          },
        },
      },
      {
        name: "Get Doc",
        value: "Get Doc",
        action: "Retrieve an existing doc",
        description:
          "Retrieve an existing doc. This will return the doc's information, including the title, folder, text and others.",
        routing: {
          request: {
            method: "GET",
            url: '=/docs/{{$parameter["id"]}}',
          },
        },
      },
      {
        name: "List Docs",
        value: "List Docs",
        action: "List docs",
        description:
          "List docs with filtering and search capabilities. Filter by folder, title, text content, or use full-text search. Sort by creation/update date or title. Supports pagination.",
        routing: {
          request: {
            method: "GET",
            url: "=/docs/list",
          },
        },
      },
      {
        name: "Update Doc",
        value: "Update Doc",
        action: "Update an existing doc",
        description:
          "Update certain properties of an existing doc. This will save the doc in Dart for later access, search, etc. Any properties that are not specified will not be changed.",
        routing: {
          request: {
            method: "PUT",
            url: '=/docs/{{$parameter["id"]}}',
          },
        },
      },
    ],
    default: "Create Doc",
  },
  {
    displayName: "Operation",
    name: "operation",
    type: "options",
    noDataExpression: true,
    displayOptions: {
      show: {
        resource: ["Folder"],
      },
    },
    options: [
      {
        name: "Get Folder",
        value: "Get Folder",
        action: "Retrieve an existing folder",
        description:
          "Retrieve an existing folder. This will return the folder's information, including the title, description, all docs within it, and others.",
        routing: {
          request: {
            method: "GET",
            url: '=/folders/{{$parameter["id"]}}',
          },
        },
      },
    ],
    default: "Get Folder",
  },
  {
    displayName: "Operation",
    name: "operation",
    type: "options",
    noDataExpression: true,
    displayOptions: {
      show: {
        resource: ["Help Center Article"],
      },
    },
    options: [
      {
        name: "List Help Center Articles",
        value: "List Help Center Articles",
        action: "List help center articles by query",
        description:
          "Search for up to two help center articles by their semantic similarity to a short (1-5 word) query",
        routing: {
          request: {
            method: "GET",
            url: "=/help-center-articles/list",
          },
        },
      },
    ],
    default: "List Help Center Articles",
  },
  {
    displayName: "Operation",
    name: "operation",
    type: "options",
    noDataExpression: true,
    displayOptions: {
      show: {
        resource: ["Skill"],
      },
    },
    options: [
      {
        name: "Retrieve Skill By Title",
        value: "Retrieve Skill By Title",
        action: "Retrieve a skill by title",
        description:
          "Retrieve a skill by its title. Skills are user-defined instructions or templates for performing specific task types in the workspace. Returns the skill's title and instructions if found.",
        routing: {
          request: {
            method: "GET",
            url: "=/skills/by-title",
          },
        },
      },
    ],
    default: "Retrieve Skill By Title",
  },
  {
    displayName: "Operation",
    name: "operation",
    type: "options",
    noDataExpression: true,
    displayOptions: {
      show: {
        resource: ["Task"],
      },
    },
    options: [
      {
        name: "Create Task",
        value: "Create Task",
        action: "Create a new task",
        description:
          "Record a new task that the user intends to do. By default the task will be assigned to the current user, have an unstarted status, have no parent, and be in the default dartboard. More information can be included in the description.",
        routing: {
          request: {
            method: "POST",
            url: "=/tasks",
          },
        },
      },
      {
        name: "Delete Task",
        value: "Delete Task",
        action: "Delete an existing task",
        description:
          "Move an existing task to the trash, where it can be recovered if needed. Nothing else about the task will be changed.",
        routing: {
          request: {
            method: "DELETE",
            url: '=/tasks/{{$parameter["id"]}}',
          },
        },
      },
      {
        name: "Get Task",
        value: "Get Task",
        action: "Retrieve an existing task",
        description:
          "Retrieve an existing task. This will return the task's information, including the title, dartboard, status, description and others.",
        routing: {
          request: {
            method: "GET",
            url: '=/tasks/{{$parameter["id"]}}',
          },
        },
      },
      {
        name: "List Tasks",
        value: "List Tasks",
        action: "List tasks",
        description:
          "List tasks with powerful filtering options. Filter by dartboard, status, assignee, tags, priority, dates, completion state, view, and more. Supports pagination with limit/offset.",
        routing: {
          request: {
            method: "GET",
            url: "=/tasks/list",
          },
        },
      },
      {
        name: "Update Task",
        value: "Update Task",
        action: "Update an existing task",
        description:
          "Update certain properties of an existing task. This will save the task in Dart for later access, search, etc. Any properties that are not specified will not be changed.",
        routing: {
          request: {
            method: "PUT",
            url: '=/tasks/{{$parameter["id"]}}',
          },
        },
      },
    ],
    default: "Create Task",
  },
  {
    displayName: "Operation",
    name: "operation",
    type: "options",
    noDataExpression: true,
    displayOptions: {
      show: {
        resource: ["Attachment"],
      },
    },
    options: [
      {
        name: "Add Task Attachment From Url",
        value: "Add Task Attachment From Url",
        action: "Attach a file from a provided URL to a task",
        description:
          "Attach a file from a provided URL to a task. The file will be downloaded and attached asynchronously. This operation may take a few moments to complete.",
        routing: {
          request: {
            method: "POST",
            url: '=/tasks/{{$parameter["id"]}}/attachments/from-url',
          },
        },
      },
    ],
    default: "Add Task Attachment From Url",
  },
  {
    displayName: "Operation",
    name: "operation",
    type: "options",
    noDataExpression: true,
    displayOptions: {
      show: {
        resource: ["View"],
      },
    },
    options: [
      {
        name: "Get View",
        value: "Get View",
        action: "Retrieve an existing view",
        description:
          "Retrieve an existing view. This will return the view's information, including the title, description, and others.",
        routing: {
          request: {
            method: "GET",
            url: '=/views/{{$parameter["id"]}}',
          },
        },
      },
    ],
    default: "Get View",
  },
  {
    displayName: "POST /comments",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Comment"],
        operation: ["Add Task Comment"],
      },
    },
  },
  {
    displayName: "Item",
    required: true,
    name: "item",
    type: "json",
    default: "{}",
    routing: {
      send: {
        property: "item",
        propertyInDotNotation: false,
        type: "body",
        value: "={{ JSON.parse($value) }}",
      },
    },
    displayOptions: {
      show: {
        resource: ["Comment"],
        operation: ["Add Task Comment"],
      },
    },
  },
  {
    displayName: "GET /comments/list",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Comment"],
        operation: ["List Comments"],
      },
    },
  },
  {
    displayName: "Limit",
    name: "limit",
    description: "Max number of results to return",
    default: 50,
    type: "number",
    routing: {
      send: {
        type: "query",
        property: "limit",
        value: "={{ $value }}",
        propertyInDotNotation: false,
      },
    },
    displayOptions: {
      show: {
        resource: ["Comment"],
        operation: ["List Comments"],
      },
    },
    typeOptions: {
      minValue: 1,
      maxValue: 200,
    },
  },
  {
    displayName: "Offset",
    name: "offset",
    description: "The initial index from which to return the results",
    default: 0,
    type: "number",
    routing: {
      send: {
        type: "query",
        property: "offset",
        value: "={{ $value }}",
        propertyInDotNotation: false,
      },
    },
    displayOptions: {
      show: {
        resource: ["Comment"],
        operation: ["List Comments"],
      },
    },
    typeOptions: {
      minValue: 0,
    },
  },
  {
    displayName: "Task ID",
    name: "task_id",
    required: true,
    default: "",
    type: "string",
    routing: {
      send: {
        type: "query",
        property: "task_id",
        value: "={{ $value }}",
        propertyInDotNotation: false,
      },
    },
    displayOptions: {
      show: {
        resource: ["Comment"],
        operation: ["List Comments"],
      },
    },
  },
  {
    displayName: "Filters",
    name: "additionalFields",
    type: "collection",
    default: {},
    placeholder: "Add Filter",
    displayOptions: {
      show: {
        resource: ["Comment"],
        operation: ["List Comments"],
      },
    },
    options: [
      {
        displayName: "Author",
        name: "author",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "author",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Author ID",
        name: "author_id",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "author_id",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "IDs",
        name: "ids",
        description: "Filter by IDs",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "ids",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Order",
        name: "o",
        description:
          "Ordering * `published_at` - Published At * `-published_at` - Published At (descending) * `hierarchical` - Hierarchical",
        default: "",
        type: "json",
        routing: {
          send: {
            type: "query",
            property: "o",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Parent ID",
        name: "parent_id",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "parent_id",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Published At",
        name: "published_at",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "published_at",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Published At After",
        name: "published_at_after",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "published_at_after",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Published At Before",
        name: "published_at_before",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "published_at_before",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Task",
        name: "task",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "task",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Text",
        name: "text",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "text",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
    ],
  },
  {
    displayName: "GET /config",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Config"],
        operation: ["Get Config"],
      },
    },
  },
  {
    displayName: "GET /dartboards/{ID}",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Dartboard"],
        operation: ["Get Dartboard"],
      },
    },
  },
  {
    displayName: "ID",
    name: "id",
    required: true,
    default: "",
    type: "string",
    displayOptions: {
      show: {
        resource: ["Dartboard"],
        operation: ["Get Dartboard"],
      },
    },
  },
  {
    displayName: "POST /docs",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["Create Doc"],
      },
    },
  },
  {
    displayName: "Item",
    required: true,
    name: "item",
    type: "json",
    default: "{}",
    routing: {
      send: {
        property: "item",
        propertyInDotNotation: false,
        type: "body",
        value: "={{ JSON.parse($value) }}",
      },
    },
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["Create Doc"],
      },
    },
  },
  {
    displayName: "GET /docs/{ID}",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["Get Doc"],
      },
    },
  },
  {
    displayName: "ID",
    name: "id",
    required: true,
    default: "",
    type: "string",
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["Get Doc"],
      },
    },
  },
  {
    displayName: "PUT /docs/{ID}",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["Update Doc"],
      },
    },
  },
  {
    displayName: "ID",
    name: "id",
    required: true,
    default: "",
    type: "string",
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["Update Doc"],
      },
    },
  },
  {
    displayName: "Item",
    required: true,
    name: "item",
    type: "json",
    default: "{}",
    routing: {
      send: {
        property: "item",
        propertyInDotNotation: false,
        type: "body",
        value: "={{ JSON.parse($value) }}",
      },
    },
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["Update Doc"],
      },
    },
  },
  {
    displayName: "DELETE /docs/{ID}",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["Delete Doc"],
      },
    },
  },
  {
    displayName: "ID",
    name: "id",
    required: true,
    default: "",
    type: "string",
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["Delete Doc"],
      },
    },
  },
  {
    displayName: "GET /docs/list",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["List Docs"],
      },
    },
  },
  {
    displayName: "Limit",
    name: "limit",
    description: "Max number of results to return",
    default: 50,
    type: "number",
    routing: {
      send: {
        type: "query",
        property: "limit",
        value: "={{ $value }}",
        propertyInDotNotation: false,
      },
    },
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["List Docs"],
      },
    },
    typeOptions: {
      minValue: 1,
      maxValue: 200,
    },
  },
  {
    displayName: "Offset",
    name: "offset",
    description: "The initial index from which to return the results",
    default: 0,
    type: "number",
    routing: {
      send: {
        type: "query",
        property: "offset",
        value: "={{ $value }}",
        propertyInDotNotation: false,
      },
    },
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["List Docs"],
      },
    },
    typeOptions: {
      minValue: 0,
    },
  },
  {
    displayName: "Filters",
    name: "additionalFields",
    type: "collection",
    default: {},
    placeholder: "Add Filter",
    displayOptions: {
      show: {
        resource: ["Doc"],
        operation: ["List Docs"],
      },
    },
    options: [
      {
        displayName: "Folder",
        name: "folder",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "folder",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Folder ID",
        name: "folder_id",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "folder_id",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "IDs",
        name: "ids",
        description: "Filter by IDs",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "ids",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "In Trash",
        name: "in_trash",
        default: true,
        type: "boolean",
        routing: {
          send: {
            type: "query",
            property: "in_trash",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Order",
        name: "o",
        description:
          "Ordering * `order` - Order * `-order` - Order (descending) * `created_at` - Created at * `-created_at` - Created at (descending) * `updated_at` - Updated at * `-updated_at` - Updated at (descending) * `title` - Title * `-title` - Title (descending)",
        default: "",
        type: "json",
        routing: {
          send: {
            type: "query",
            property: "o",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Search",
        name: "s",
        description: "Search by title, text, or folder title",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "s",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Text",
        name: "text",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "text",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Title",
        name: "title",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "title",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
    ],
  },
  {
    displayName: "GET /folders/{ID}",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Folder"],
        operation: ["Get Folder"],
      },
    },
  },
  {
    displayName: "ID",
    name: "id",
    required: true,
    default: "",
    type: "string",
    displayOptions: {
      show: {
        resource: ["Folder"],
        operation: ["Get Folder"],
      },
    },
  },
  {
    displayName: "GET /help-center-articles/list",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Help Center Article"],
        operation: ["List Help Center Articles"],
      },
    },
  },
  {
    displayName: "Filters",
    name: "additionalFields",
    type: "collection",
    default: {},
    placeholder: "Add Filter",
    displayOptions: {
      show: {
        resource: ["Help Center Article"],
        operation: ["List Help Center Articles"],
      },
    },
    options: [
      {
        displayName: "Query",
        name: "query",
        description: "The search query (1-5 words) to find relevant help articles",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "query",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
    ],
  },
  {
    displayName: "GET /skills/by-title",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Skill"],
        operation: ["Retrieve Skill By Title"],
      },
    },
  },
  {
    displayName: "Title",
    name: "title",
    required: true,
    description: "The title of the skill to retrieve",
    default: "",
    type: "string",
    routing: {
      send: {
        type: "query",
        property: "title",
        value: "={{ $value }}",
        propertyInDotNotation: false,
      },
    },
    displayOptions: {
      show: {
        resource: ["Skill"],
        operation: ["Retrieve Skill By Title"],
      },
    },
  },
  {
    displayName: "POST /tasks",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["Create Task"],
      },
    },
  },
  {
    displayName: "Item",
    required: true,
    name: "item",
    type: "json",
    default:
      '{\n  "assignees": [\n    null\n  ],\n  "tags": [\n    null\n  ],\n  "customProperties": {\n    "customCheckboxProperty": true,\n    "customDatesProperty": "2025-05-10",\n    "customDatesPropertyWithRange": [\n      "2025-05-01",\n      "2025-05-30"\n    ],\n    "customMultiselectProperty": [\n      "frontend",\n      "bug"\n    ],\n    "customNumberPropertyWithIntegerFormat": 5,\n    "customNumberPropertyWithPercentageFormat": 75,\n    "customNumberPropertyWithDollarsFormat": 1500.5,\n    "customSelectProperty": "In Progress",\n    "customStatusProperty": "Blocked",\n    "customTextProperty": "This task requires additional review from the design team",\n    "customUserProperty": "john.doe@example.com",\n    "customMultipleUserProperty": [\n      "john.doe@example.com",\n      "Alice Smith"\n    ]\n  },\n  "taskRelationships": {\n    "subtaskIds": [\n      "abcdefghijk1",\n      "abcdefghijk2"\n    ],\n    "blockerIds": [\n      "abcdefghijk3"\n    ],\n    "blockingIds": [\n      "abcdefghijk4"\n    ],\n    "duplicateIds": [\n      "abcdefghijk5"\n    ],\n    "relatedIds": [\n      "abcdefghijk6",\n      "abcdefghijk7"\n    ]\n  }\n}',
    routing: {
      send: {
        property: "item",
        propertyInDotNotation: false,
        type: "body",
        value: "={{ JSON.parse($value) }}",
      },
    },
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["Create Task"],
      },
    },
  },
  {
    displayName: "GET /tasks/{ID}",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["Get Task"],
      },
    },
  },
  {
    displayName: "ID",
    name: "id",
    required: true,
    default: "",
    type: "string",
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["Get Task"],
      },
    },
  },
  {
    displayName: "PUT /tasks/{ID}",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["Update Task"],
      },
    },
  },
  {
    displayName: "ID",
    name: "id",
    required: true,
    default: "",
    type: "string",
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["Update Task"],
      },
    },
  },
  {
    displayName: "Item",
    required: true,
    name: "item",
    type: "json",
    default:
      '{\n  "assignees": [\n    null\n  ],\n  "tags": [\n    null\n  ],\n  "customProperties": {\n    "customCheckboxProperty": true,\n    "customDatesProperty": "2025-05-10",\n    "customDatesPropertyWithRange": [\n      "2025-05-01",\n      "2025-05-30"\n    ],\n    "customMultiselectProperty": [\n      "frontend",\n      "bug"\n    ],\n    "customNumberPropertyWithIntegerFormat": 5,\n    "customNumberPropertyWithPercentageFormat": 75,\n    "customNumberPropertyWithDollarsFormat": 1500.5,\n    "customSelectProperty": "In Progress",\n    "customStatusProperty": "Blocked",\n    "customTextProperty": "This task requires additional review from the design team",\n    "customUserProperty": "john.doe@example.com",\n    "customMultipleUserProperty": [\n      "john.doe@example.com",\n      "Alice Smith"\n    ]\n  },\n  "taskRelationships": {\n    "subtaskIds": [\n      "abcdefghijk1",\n      "abcdefghijk2"\n    ],\n    "blockerIds": [\n      "abcdefghijk3"\n    ],\n    "blockingIds": [\n      "abcdefghijk4"\n    ],\n    "duplicateIds": [\n      "abcdefghijk5"\n    ],\n    "relatedIds": [\n      "abcdefghijk6",\n      "abcdefghijk7"\n    ]\n  }\n}',
    routing: {
      send: {
        property: "item",
        propertyInDotNotation: false,
        type: "body",
        value: "={{ JSON.parse($value) }}",
      },
    },
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["Update Task"],
      },
    },
  },
  {
    displayName: "DELETE /tasks/{ID}",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["Delete Task"],
      },
    },
  },
  {
    displayName: "ID",
    name: "id",
    required: true,
    default: "",
    type: "string",
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["Delete Task"],
      },
    },
  },
  {
    displayName: "POST /tasks/{ID}/attachments/from-url",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Attachment"],
        operation: ["Add Task Attachment From Url"],
      },
    },
  },
  {
    displayName: "ID",
    name: "id",
    required: true,
    default: "",
    type: "string",
    displayOptions: {
      show: {
        resource: ["Attachment"],
        operation: ["Add Task Attachment From Url"],
      },
    },
  },
  {
    displayName: "Name",
    required: true,
    name: "name",
    type: "string",
    default: "",
    description: "The name of the file to upload",
    routing: {
      send: {
        property: "name",
        propertyInDotNotation: false,
        type: "body",
        value: "={{ $value }}",
      },
    },
    displayOptions: {
      show: {
        resource: ["Attachment"],
        operation: ["Add Task Attachment From Url"],
      },
    },
  },
  {
    displayName: "Url",
    required: true,
    name: "url",
    type: "string",
    default: "",
    description: "The URL of the file to upload",
    routing: {
      send: {
        property: "url",
        propertyInDotNotation: false,
        type: "body",
        value: "={{ $value }}",
      },
    },
    displayOptions: {
      show: {
        resource: ["Attachment"],
        operation: ["Add Task Attachment From Url"],
      },
    },
  },
  {
    displayName: "GET /tasks/list",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["List Tasks"],
      },
    },
  },
  {
    displayName: "Limit",
    name: "limit",
    description: "Max number of results to return",
    default: 50,
    type: "number",
    routing: {
      send: {
        type: "query",
        property: "limit",
        value: "={{ $value }}",
        propertyInDotNotation: false,
      },
    },
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["List Tasks"],
      },
    },
    typeOptions: {
      minValue: 1,
      maxValue: 200,
    },
  },
  {
    displayName: "Offset",
    name: "offset",
    description: "The initial index from which to return the results",
    default: 0,
    type: "number",
    routing: {
      send: {
        type: "query",
        property: "offset",
        value: "={{ $value }}",
        propertyInDotNotation: false,
      },
    },
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["List Tasks"],
      },
    },
    typeOptions: {
      minValue: 0,
    },
  },
  {
    displayName: "Filters",
    name: "additionalFields",
    type: "collection",
    default: {},
    placeholder: "Add Filter",
    displayOptions: {
      show: {
        resource: ["Task"],
        operation: ["List Tasks"],
      },
    },
    options: [
      {
        displayName: "Assignee",
        name: "assignee",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "assignee",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Assignee ID",
        name: "assignee_id",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "assignee_id",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Dartboard",
        name: "dartboard",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "dartboard",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Dartboard ID",
        name: "dartboard_id",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "dartboard_id",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Description",
        name: "description",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "description",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Due At",
        name: "due_at",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "due_at",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Due At After",
        name: "due_at_after",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "due_at_after",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Due At Before",
        name: "due_at_before",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "due_at_before",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "IDs",
        name: "ids",
        description: "Filter by IDs",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "ids",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "In Trash",
        name: "in_trash",
        default: true,
        type: "boolean",
        routing: {
          send: {
            type: "query",
            property: "in_trash",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Is Completed",
        name: "is_completed",
        default: true,
        type: "boolean",
        routing: {
          send: {
            type: "query",
            property: "is_completed",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Parent ID",
        name: "parent_id",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "parent_id",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Priority",
        name: "priority",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "priority",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Size",
        name: "size",
        default: 0,
        type: "number",
        routing: {
          send: {
            type: "query",
            property: "size",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
        typeOptions: {
          minValue: 0,
        },
      },
      {
        displayName: "Start At",
        name: "start_at",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "start_at",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Start At After",
        name: "start_at_after",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "start_at_after",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Start At Before",
        name: "start_at_before",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "start_at_before",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Status",
        name: "status",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "status",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Status ID",
        name: "status_id",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "status_id",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Tag",
        name: "tag",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "tag",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Tag ID",
        name: "tag_id",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "tag_id",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Title",
        name: "title",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "title",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Type",
        name: "type",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "type",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "Type ID",
        name: "type_id",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "type_id",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "View",
        name: "view",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "view",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
      {
        displayName: "View ID",
        name: "view_id",
        default: "",
        type: "string",
        routing: {
          send: {
            type: "query",
            property: "view_id",
            value: "={{ $value }}",
            propertyInDotNotation: false,
          },
        },
      },
    ],
  },
  {
    displayName: "GET /views/{ID}",
    name: "operation",
    type: "notice",
    typeOptions: {
      theme: "info",
    },
    default: "",
    displayOptions: {
      show: {
        resource: ["View"],
        operation: ["Get View"],
      },
    },
  },
  {
    displayName: "ID",
    name: "id",
    required: true,
    default: "",
    type: "string",
    displayOptions: {
      show: {
        resource: ["View"],
        operation: ["Get View"],
      },
    },
  },
];
